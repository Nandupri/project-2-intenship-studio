{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Youtube adview Prediction Project#\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#path = \"\" # Put path of your folder of your data if it's not in the same folder \n",
    "data_train = pd.read_csv(\"train.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>adview</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VID_18655</td>\n",
       "      <td>40</td>\n",
       "      <td>1031602</td>\n",
       "      <td>8523</td>\n",
       "      <td>363</td>\n",
       "      <td>1095</td>\n",
       "      <td>2016-09-14</td>\n",
       "      <td>PT7M37S</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VID_14135</td>\n",
       "      <td>2</td>\n",
       "      <td>1707</td>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2016-10-01</td>\n",
       "      <td>PT9M30S</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VID_2187</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2016-07-02</td>\n",
       "      <td>PT2M16S</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VID_23096</td>\n",
       "      <td>6</td>\n",
       "      <td>620860</td>\n",
       "      <td>777</td>\n",
       "      <td>161</td>\n",
       "      <td>153</td>\n",
       "      <td>2016-07-27</td>\n",
       "      <td>PT4M22S</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VID_10175</td>\n",
       "      <td>1</td>\n",
       "      <td>666</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-06-29</td>\n",
       "      <td>PT31S</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vidid  adview    views likes dislikes comment   published duration  \\\n",
       "0  VID_18655      40  1031602  8523      363    1095  2016-09-14  PT7M37S   \n",
       "1  VID_14135       2     1707    56        2       6  2016-10-01  PT9M30S   \n",
       "2   VID_2187       1     2023    25        0       2  2016-07-02  PT2M16S   \n",
       "3  VID_23096       6   620860   777      161     153  2016-07-27  PT4M22S   \n",
       "4  VID_10175       1      666     1        0       0  2016-06-29    PT31S   \n",
       "\n",
       "  category  \n",
       "0        F  \n",
       "1        D  \n",
       "2        C  \n",
       "3        H  \n",
       "4        D  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cleaning and Processing the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14999, 9)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.shape \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>adview</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VID_18655</td>\n",
       "      <td>40</td>\n",
       "      <td>1031602</td>\n",
       "      <td>8523</td>\n",
       "      <td>363</td>\n",
       "      <td>1095</td>\n",
       "      <td>2016-09-14</td>\n",
       "      <td>PT7M37S</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VID_14135</td>\n",
       "      <td>2</td>\n",
       "      <td>1707</td>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2016-10-01</td>\n",
       "      <td>PT9M30S</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VID_2187</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2016-07-02</td>\n",
       "      <td>PT2M16S</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VID_23096</td>\n",
       "      <td>6</td>\n",
       "      <td>620860</td>\n",
       "      <td>777</td>\n",
       "      <td>161</td>\n",
       "      <td>153</td>\n",
       "      <td>2016-07-27</td>\n",
       "      <td>PT4M22S</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VID_10175</td>\n",
       "      <td>1</td>\n",
       "      <td>666</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-06-29</td>\n",
       "      <td>PT31S</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vidid  adview    views likes dislikes comment   published duration  \\\n",
       "0  VID_18655      40  1031602  8523      363    1095  2016-09-14  PT7M37S   \n",
       "1  VID_14135       2     1707    56        2       6  2016-10-01  PT9M30S   \n",
       "2   VID_2187       1     2023    25        0       2  2016-07-02  PT2M16S   \n",
       "3  VID_23096       6   620860   777      161     153  2016-07-27  PT4M22S   \n",
       "4  VID_10175       1      666     1        0       0  2016-06-29    PT31S   \n",
       "\n",
       "   category  \n",
       "0         6  \n",
       "1         4  \n",
       "2         3  \n",
       "3         8  \n",
       "4         4  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Assigning each category a number for Category feature \n",
    "category={'A': 1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8} \n",
    "data_train[\"category\"]=data_train[\"category\"].map(category) \n",
    "data_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing character \"F\" present in data\n",
    "data_train=data_train[data_train.views!='F'] \n",
    "data_train=data_train[data_train.likes!='F'] \n",
    "data_train=data_train[data_train.dislikes!='F'] \n",
    "data_train=data_train[data_train.comment!='F']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>adview</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VID_18655</td>\n",
       "      <td>40</td>\n",
       "      <td>1031602</td>\n",
       "      <td>8523</td>\n",
       "      <td>363</td>\n",
       "      <td>1095</td>\n",
       "      <td>2016-09-14</td>\n",
       "      <td>PT7M37S</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VID_14135</td>\n",
       "      <td>2</td>\n",
       "      <td>1707</td>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2016-10-01</td>\n",
       "      <td>PT9M30S</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VID_2187</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2016-07-02</td>\n",
       "      <td>PT2M16S</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VID_23096</td>\n",
       "      <td>6</td>\n",
       "      <td>620860</td>\n",
       "      <td>777</td>\n",
       "      <td>161</td>\n",
       "      <td>153</td>\n",
       "      <td>2016-07-27</td>\n",
       "      <td>PT4M22S</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VID_10175</td>\n",
       "      <td>1</td>\n",
       "      <td>666</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-06-29</td>\n",
       "      <td>PT31S</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vidid  adview    views likes dislikes comment   published duration  \\\n",
       "0  VID_18655      40  1031602  8523      363    1095  2016-09-14  PT7M37S   \n",
       "1  VID_14135       2     1707    56        2       6  2016-10-01  PT9M30S   \n",
       "2   VID_2187       1     2023    25        0       2  2016-07-02  PT2M16S   \n",
       "3  VID_23096       6   620860   777      161     153  2016-07-27  PT4M22S   \n",
       "4  VID_10175       1      666     1        0       0  2016-06-29    PT31S   \n",
       "\n",
       "   category  \n",
       "0         6  \n",
       "1         4  \n",
       "2         3  \n",
       "3         8  \n",
       "4         4  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert values to integers for views, likes, comments, dislikes and adview\n",
    "data_train[\"views\"] = pd.to_numeric(data_train[\"views\"]) \n",
    "data_train[\"comment\"] = pd.to_numeric(data_train[\"comment\"]) \n",
    "data_train[\"likes\"] = pd.to_numeric(data_train[\"likes\"]) \n",
    "data_train[\"dislikes\"] = pd.to_numeric(data_train[\"dislikes\"]) \n",
    "data_train[\"adview\"]=pd.to_numeric(data_train[\"adview\"])\n",
    "column_vidid=data_train['vidid']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>adview</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5912</td>\n",
       "      <td>40</td>\n",
       "      <td>1031602</td>\n",
       "      <td>8523</td>\n",
       "      <td>363</td>\n",
       "      <td>1095</td>\n",
       "      <td>2168</td>\n",
       "      <td>2925</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2741</td>\n",
       "      <td>2</td>\n",
       "      <td>1707</td>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2185</td>\n",
       "      <td>3040</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8138</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2094</td>\n",
       "      <td>1863</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9005</td>\n",
       "      <td>6</td>\n",
       "      <td>620860</td>\n",
       "      <td>777</td>\n",
       "      <td>161</td>\n",
       "      <td>153</td>\n",
       "      <td>2119</td>\n",
       "      <td>2546</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>122</td>\n",
       "      <td>1</td>\n",
       "      <td>666</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2091</td>\n",
       "      <td>1963</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   vidid  adview    views  likes  dislikes  comment  published  duration  \\\n",
       "0   5912      40  1031602   8523       363     1095       2168      2925   \n",
       "1   2741       2     1707     56         2        6       2185      3040   \n",
       "2   8138       1     2023     25         0        2       2094      1863   \n",
       "3   9005       6   620860    777       161      153       2119      2546   \n",
       "4    122       1      666      1         0        0       2091      1963   \n",
       "\n",
       "   category  \n",
       "0         6  \n",
       "1         4  \n",
       "2         3  \n",
       "3         8  \n",
       "4         4  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Endoding features like Category, Duration, Vidid\n",
    "from sklearn.preprocessing import LabelEncoder \n",
    "data_train['duration']=LabelEncoder().fit_transform(data_train['duration']) \n",
    "data_train['vidid']=LabelEncoder().fit_transform(data_train['vidid']) \n",
    "data_train['published']=LabelEncoder().fit_transform(data_train['published'])\n",
    "data_train.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert Time_in_sec for duration \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>adview</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5912</td>\n",
       "      <td>40</td>\n",
       "      <td>1031602</td>\n",
       "      <td>8523</td>\n",
       "      <td>363</td>\n",
       "      <td>1095</td>\n",
       "      <td>2168</td>\n",
       "      <td>457</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2741</td>\n",
       "      <td>2</td>\n",
       "      <td>1707</td>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>2185</td>\n",
       "      <td>570</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8138</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2094</td>\n",
       "      <td>136</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9005</td>\n",
       "      <td>6</td>\n",
       "      <td>620860</td>\n",
       "      <td>777</td>\n",
       "      <td>161</td>\n",
       "      <td>153</td>\n",
       "      <td>2119</td>\n",
       "      <td>262</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>122</td>\n",
       "      <td>1</td>\n",
       "      <td>666</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2091</td>\n",
       "      <td>31</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   vidid  adview    views  likes  dislikes  comment  published  duration  \\\n",
       "0   5912      40  1031602   8523       363     1095       2168       457   \n",
       "1   2741       2     1707     56         2        6       2185       570   \n",
       "2   8138       1     2023     25         0        2       2094       136   \n",
       "3   9005       6   620860    777       161      153       2119       262   \n",
       "4    122       1      666      1         0        0       2091        31   \n",
       "\n",
       "   category  \n",
       "0         6  \n",
       "1         4  \n",
       "2         3  \n",
       "3         8  \n",
       "4         4  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert Time_in_sec for duration\n",
    "import datetime\n",
    "import time\n",
    "def checki(x):\n",
    " y = x[2:]\n",
    " h = ''\n",
    " m = ''\n",
    " s = ''\n",
    " mm = ''\n",
    " P = ['H','M','S']\n",
    " for i in y:\n",
    "     if i not in P:\n",
    "        mm+=i\n",
    "     else:\n",
    "           if(i==\"H\"):\n",
    "              h = mm\n",
    "              mm = ''\n",
    "           elif(i == \"M\"):\n",
    "              m = mm\n",
    "              mm = ''\n",
    "           else:\n",
    "              s = mm\n",
    "              mm = ''\n",
    " if(h==''):\n",
    "       h = '00'\n",
    " if(m == ''):\n",
    "       m = '00'\n",
    " if(s==''):\n",
    "        s='00'\n",
    " bp = h+':'+m+':'+s\n",
    " return bp\n",
    "train=pd.read_csv(\"train.csv\")\n",
    "mp = pd.read_csv(\"train.csv\")[\"duration\"]\n",
    "time = mp.apply(checki)\n",
    "\n",
    "def func_sec(time_string):\n",
    " h, m, s = time_string.split(':')\n",
    " return int(h) * 3600 + int(m) * 60 + int(s)\n",
    "\n",
    "time1=time.apply(func_sec)\n",
    "\n",
    "data_train[\"duration\"]=time1\n",
    "data_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualising the dataset using plots "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization\n",
    "# Individual Plots\n",
    "plt.hist(data_train[\"category\"]) \n",
    "plt.show() \n",
    "plt.plot(data_train[\"adview\"]) \n",
    "plt.show()\n",
    "# Remove videos with adview greater than 2000000 as outlier \n",
    "data_train = data_train[data_train[\"adview\"] <2000000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Heatmap\n",
    "import seaborn as sns\n",
    "f, ax = plt.subplots(figsize=(10, 8))\n",
    "corr = data_train.corr()\n",
    "sns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),square=True, ax=ax,annot=True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>adview</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>14636.000000</td>\n",
       "      <td>1.463600e+04</td>\n",
       "      <td>1.463600e+04</td>\n",
       "      <td>14636.000000</td>\n",
       "      <td>14636.000000</td>\n",
       "      <td>14636.000000</td>\n",
       "      <td>14636.000000</td>\n",
       "      <td>14636.000000</td>\n",
       "      <td>14636.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7317.919719</td>\n",
       "      <td>1.695191e+03</td>\n",
       "      <td>7.107934e+05</td>\n",
       "      <td>2784.093946</td>\n",
       "      <td>254.150724</td>\n",
       "      <td>409.035597</td>\n",
       "      <td>1547.316617</td>\n",
       "      <td>1040.232441</td>\n",
       "      <td>4.607065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4225.615477</td>\n",
       "      <td>2.788993e+04</td>\n",
       "      <td>2.731062e+06</td>\n",
       "      <td>8936.295816</td>\n",
       "      <td>1029.257991</td>\n",
       "      <td>1511.180179</td>\n",
       "      <td>582.891902</td>\n",
       "      <td>2316.888900</td>\n",
       "      <td>1.576242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>4.900000e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3658.750000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.151425e+04</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1135.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7317.500000</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>1.586610e+05</td>\n",
       "      <td>450.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>1699.500000</td>\n",
       "      <td>325.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>10977.250000</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>5.829575e+05</td>\n",
       "      <td>1861.500000</td>\n",
       "      <td>166.250000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>2064.000000</td>\n",
       "      <td>723.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>14636.000000</td>\n",
       "      <td>1.583846e+06</td>\n",
       "      <td>1.380479e+08</td>\n",
       "      <td>283824.000000</td>\n",
       "      <td>49449.000000</td>\n",
       "      <td>75045.000000</td>\n",
       "      <td>2383.000000</td>\n",
       "      <td>42317.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              vidid        adview         views          likes      dislikes  \\\n",
       "count  14636.000000  1.463600e+04  1.463600e+04   14636.000000  14636.000000   \n",
       "mean    7317.919719  1.695191e+03  7.107934e+05    2784.093946    254.150724   \n",
       "std     4225.615477  2.788993e+04  2.731062e+06    8936.295816   1029.257991   \n",
       "min        0.000000  1.000000e+00  4.900000e+01       0.000000      0.000000   \n",
       "25%     3658.750000  1.000000e+00  3.151425e+04      88.000000      7.000000   \n",
       "50%     7317.500000  2.000000e+00  1.586610e+05     450.000000     38.000000   \n",
       "75%    10977.250000  6.000000e+00  5.829575e+05    1861.500000    166.250000   \n",
       "max    14636.000000  1.583846e+06  1.380479e+08  283824.000000  49449.000000   \n",
       "\n",
       "            comment     published      duration      category  \n",
       "count  14636.000000  14636.000000  14636.000000  14636.000000  \n",
       "mean     409.035597   1547.316617   1040.232441      4.607065  \n",
       "std     1511.180179    582.891902   2316.888900      1.576242  \n",
       "min        0.000000      0.000000      0.000000      1.000000  \n",
       "25%        7.000000   1135.000000    187.000000      4.000000  \n",
       "50%       46.000000   1699.500000    325.000000      4.000000  \n",
       "75%      224.000000   2064.000000    723.000000      6.000000  \n",
       "max    75045.000000   2383.000000  42317.000000      8.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalising data and split the data into training, validation and test set in the appropriate ratio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11708, 7)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split Data\n",
    "Y_train = pd.DataFrame(data = data_train.iloc[:, 1].values, columns = ['target']) \n",
    "data_train=data_train.drop([\"adview\"],axis=1) \n",
    "data_train=data_train.drop([\"vidid\"],axis=1)\n",
    "data_train.head()\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(data_train, Y_train, test_size=0.2, random_state=42)\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1739096800320488"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Normalise Data\n",
    "from sklearn.preprocessing import MinMaxScaler \n",
    "scaler = MinMaxScaler() \n",
    "X_train=scaler.fit_transform(X_train) \n",
    "X_test=scaler.fit_transform(X_test)\n",
    "X_train.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using linear regression, support vector regressor, random forest regressor and decision tree for training and get errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluation Metrics\n",
    "from sklearn import metrics\n",
    "def print_error(X_test, y_test, model_name):\n",
    "    prediction = model_name.predict(X_test)\n",
    "    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, prediction))\n",
    "    print('Mean Squared Error:', metrics.mean_squared_error(y_test, prediction))\n",
    "    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 3707.3780058245347\n",
      "Mean Squared Error: 835663131.1210337\n",
      "Root Mean Squared Error: 28907.83857573986\n"
     ]
    }
   ],
   "source": [
    "# Linear Regression\n",
    "from sklearn import linear_model\n",
    "linear_regression = linear_model.LinearRegression() \n",
    "linear_regression.fit(X_train, y_train) \n",
    "print_error(X_test,y_test, linear_regression)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sejal/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 3707.3780058245347\n",
      "Mean Squared Error: 835663131.1210337\n",
      "Root Mean Squared Error: 28907.83857573986\n"
     ]
    }
   ],
   "source": [
    "# Support Vector Regressor\n",
    "from sklearn.svm import SVR \n",
    "supportvector_regressor = SVR() \n",
    "supportvector_regressor.fit(X_train,y_train) \n",
    "print_error(X_test,y_test, linear_regression)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 2972.7554644808743\n",
      "Mean Squared Error: 1218947929.4392076\n",
      "Root Mean Squared Error: 34913.4347986446\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree Regressor\n",
    "from sklearn.tree import DecisionTreeRegressor \n",
    "decision_tree = DecisionTreeRegressor() \n",
    "decision_tree.fit(X_train, y_train) \n",
    "print_error(X_test,y_test, decision_tree)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sejal/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 3313.9356623521862\n",
      "Mean Squared Error: 683904147.9160153\n",
      "Root Mean Squared Error: 26151.561099024573\n"
     ]
    }
   ],
   "source": [
    "# Random Forest Regressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "n_estimators = 200\n",
    "max_depth = 25\n",
    "min_samples_split=15\n",
    "min_samples_leaf=2\n",
    "random_forest = RandomForestRegressor(n_estimators = n_estimators, max_depth = max_depth, min_samples_split=min_samples_split, min_samples_leaf=min_samples_leaf)\n",
    "random_forest.fit(X_train,y_train)\n",
    "print_error(X_test,y_test, random_forest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building an artificial neural network and training it with different layers and hyperparameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "# Artificial Neural Network import keras\n",
    "import keras\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import Dense\n",
    "ann = keras.models.Sequential([Dense(6, activation=\"relu\", \n",
    "                               input_shape=X_train.shape[1:]), \n",
    "                               Dense(6,activation=\"relu\"), \n",
    "                               Dense(1)\n",
    "                               ])\n",
    "optimizer=keras.optimizers.Adam()\n",
    "loss=keras.losses.mean_squared_error \n",
    "ann.compile(optimizer=optimizer,loss=loss,metrics=[\"mean_squared_error\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "11708/11708 [==============================] - 1s 107us/step - loss: 767404176.6457 - mean_squared_error: 767403968.0000\n",
      "Epoch 2/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 767392311.8726 - mean_squared_error: 767392128.0000\n",
      "Epoch 3/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 767353897.2198 - mean_squared_error: 767353792.0000\n",
      "Epoch 4/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 767284740.8029 - mean_squared_error: 767284544.0000\n",
      "Epoch 5/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 767188737.9865 - mean_squared_error: 767188096.0000\n",
      "Epoch 6/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 767073813.2598 - mean_squared_error: 767073856.0000\n",
      "Epoch 7/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 766925282.2893 - mean_squared_error: 766924864.0000\n",
      "Epoch 8/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 766753766.3983 - mean_squared_error: 766754112.0000\n",
      "Epoch 9/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 766557722.8911 - mean_squared_error: 766557568.0000\n",
      "Epoch 10/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 766348823.8598 - mean_squared_error: 766349248.0000\n",
      "Epoch 11/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 766133725.9266 - mean_squared_error: 766133632.0000\n",
      "Epoch 12/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 765925420.4847 - mean_squared_error: 765925504.0000\n",
      "Epoch 13/100\n",
      "11708/11708 [==============================] - 1s 75us/step - loss: 765727008.3206 - mean_squared_error: 765727040.0000\n",
      "Epoch 14/100\n",
      "11708/11708 [==============================] - 1s 83us/step - loss: 765535291.5740 - mean_squared_error: 765535552.0000\n",
      "Epoch 15/100\n",
      "11708/11708 [==============================] - 1s 68us/step - loss: 765356238.0876 - mean_squared_error: 765355904.0000\n",
      "Epoch 16/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 765189133.7333 - mean_squared_error: 765189184.0000\n",
      "Epoch 17/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 765030976.6761 - mean_squared_error: 765030848.0000\n",
      "Epoch 18/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 764891024.1076 - mean_squared_error: 764891264.0000\n",
      "Epoch 19/100\n",
      "11708/11708 [==============================] - 1s 68us/step - loss: 764768325.1184 - mean_squared_error: 764768448.0000\n",
      "Epoch 20/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 764660580.8640 - mean_squared_error: 764660416.0000\n",
      "Epoch 21/100\n",
      "11708/11708 [==============================] - 1s 70us/step - loss: 764558518.9520 - mean_squared_error: 764558400.0000\n",
      "Epoch 22/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 764470522.5773 - mean_squared_error: 764470592.0000\n",
      "Epoch 23/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 764396914.9517 - mean_squared_error: 764396480.0000\n",
      "Epoch 24/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 764331267.3382 - mean_squared_error: 764330880.0000\n",
      "Epoch 25/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 764267494.3596 - mean_squared_error: 764267648.0000\n",
      "Epoch 26/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 764220241.4816 - mean_squared_error: 764220416.0000\n",
      "Epoch 27/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 764168913.3737 - mean_squared_error: 764168448.0000\n",
      "Epoch 28/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 764130680.4185 - mean_squared_error: 764131072.0000\n",
      "Epoch 29/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 764091384.0867 - mean_squared_error: 764091200.0000\n",
      "Epoch 30/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 764059124.9134 - mean_squared_error: 764059200.0000\n",
      "Epoch 31/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 764028510.5899 - mean_squared_error: 764028480.0000\n",
      "Epoch 32/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 764003870.4740 - mean_squared_error: 764003968.0000\n",
      "Epoch 33/100\n",
      "11708/11708 [==============================] - 1s 75us/step - loss: 763976261.6553 - mean_squared_error: 763976000.0000\n",
      "Epoch 34/100\n",
      "11708/11708 [==============================] - 1s 70us/step - loss: 763950874.6027 - mean_squared_error: 763950784.0000\n",
      "Epoch 35/100\n",
      "11708/11708 [==============================] - 1s 78us/step - loss: 763929271.3408 - mean_squared_error: 763929088.0000\n",
      "Epoch 36/100\n",
      "11708/11708 [==============================] - 1s 72us/step - loss: 763906285.1343 - mean_squared_error: 763906304.0000\n",
      "Epoch 37/100\n",
      "11708/11708 [==============================] - 1s 78us/step - loss: 763889443.9160 - mean_squared_error: 763889216.0000\n",
      "Epoch 38/100\n",
      "11708/11708 [==============================] - 1s 69us/step - loss: 763867938.5931 - mean_squared_error: 763868288.0000\n",
      "Epoch 39/100\n",
      "11708/11708 [==============================] - 1s 79us/step - loss: 763850102.1109 - mean_squared_error: 763850176.0000\n",
      "Epoch 40/100\n",
      "11708/11708 [==============================] - 1s 74us/step - loss: 763829229.3967 - mean_squared_error: 763829312.0000\n",
      "Epoch 41/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 763811480.1674 - mean_squared_error: 763811520.0000\n",
      "Epoch 42/100\n",
      "11708/11708 [==============================] - 1s 71us/step - loss: 763795788.6443 - mean_squared_error: 763795520.0000\n",
      "Epoch 43/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 763775798.9518 - mean_squared_error: 763776192.0000\n",
      "Epoch 44/100\n",
      "11708/11708 [==============================] - 1s 76us/step - loss: 763755430.4866 - mean_squared_error: 763755328.0000\n",
      "Epoch 45/100\n",
      "11708/11708 [==============================] - 1s 80us/step - loss: 763739808.5910 - mean_squared_error: 763739904.0000\n",
      "Epoch 46/100\n",
      "11708/11708 [==============================] - 1s 80us/step - loss: 763721048.7620 - mean_squared_error: 763720512.0000\n",
      "Epoch 47/100\n",
      "11708/11708 [==============================] - 1s 84us/step - loss: 763701025.3686 - mean_squared_error: 763701248.0000\n",
      "Epoch 48/100\n",
      "11708/11708 [==============================] - 1s 72us/step - loss: 763686290.3258 - mean_squared_error: 763686464.0000\n",
      "Epoch 49/100\n",
      "11708/11708 [==============================] - 1s 77us/step - loss: 763670200.3022 - mean_squared_error: 763670080.0000\n",
      "Epoch 50/100\n",
      "11708/11708 [==============================] - 1s 79us/step - loss: 763650750.8159 - mean_squared_error: 763650752.0000\n",
      "Epoch 51/100\n",
      "11708/11708 [==============================] - 1s 81us/step - loss: 763631830.1372 - mean_squared_error: 763631488.0000\n",
      "Epoch 52/100\n",
      "11708/11708 [==============================] - 1s 81us/step - loss: 763612616.4968 - mean_squared_error: 763612672.0000\n",
      "Epoch 53/100\n",
      "11708/11708 [==============================] - 1s 79us/step - loss: 763598665.3769 - mean_squared_error: 763598976.0000\n",
      "Epoch 54/100\n",
      "11708/11708 [==============================] - 1s 77us/step - loss: 763578415.9220 - mean_squared_error: 763578432.0000\n",
      "Epoch 55/100\n",
      "11708/11708 [==============================] - 1s 71us/step - loss: 763558730.6512 - mean_squared_error: 763559040.0000\n",
      "Epoch 56/100\n",
      "11708/11708 [==============================] - 1s 73us/step - loss: 763540563.7528 - mean_squared_error: 763541120.0000\n",
      "Epoch 57/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 763522550.4229 - mean_squared_error: 763522304.0000\n",
      "Epoch 58/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 763505210.9641 - mean_squared_error: 763505280.0000\n",
      "Epoch 59/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 763490034.7537 - mean_squared_error: 763490048.0000\n",
      "Epoch 60/100\n",
      "11708/11708 [==============================] - 1s 66us/step - loss: 763467609.1199 - mean_squared_error: 763467456.0000\n",
      "Epoch 61/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 763451644.9744 - mean_squared_error: 763451456.0000\n",
      "Epoch 62/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763434820.1335 - mean_squared_error: 763434880.0000\n",
      "Epoch 63/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763415692.5746 - mean_squared_error: 763415744.0000\n",
      "Epoch 64/100\n",
      "11708/11708 [==============================] - 1s 60us/step - loss: 763392490.8319 - mean_squared_error: 763392448.0000\n",
      "Epoch 65/100\n",
      "11708/11708 [==============================] - 1s 58us/step - loss: 763377903.3674 - mean_squared_error: 763377856.0000\n",
      "Epoch 66/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763359779.7474 - mean_squared_error: 763359936.0000\n",
      "Epoch 67/100\n",
      "11708/11708 [==============================] - 1s 58us/step - loss: 763339302.4330 - mean_squared_error: 763339136.0000\n",
      "Epoch 68/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763319779.3335 - mean_squared_error: 763319360.0000\n",
      "Epoch 69/100\n",
      "11708/11708 [==============================] - 1s 58us/step - loss: 763303694.1973 - mean_squared_error: 763303936.0000\n",
      "Epoch 70/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763285609.1848 - mean_squared_error: 763285888.0000\n",
      "Epoch 71/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763262129.7924 - mean_squared_error: 763262016.0000\n",
      "Epoch 72/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763246474.8162 - mean_squared_error: 763246208.0000\n",
      "Epoch 73/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 763228937.8155 - mean_squared_error: 763228928.0000\n",
      "Epoch 74/100\n",
      "11708/11708 [==============================] - 1s 60us/step - loss: 763209119.3523 - mean_squared_error: 763208832.0000\n",
      "Epoch 75/100\n",
      "11708/11708 [==============================] - 1s 58us/step - loss: 763189210.4886 - mean_squared_error: 763189312.0000\n",
      "Epoch 76/100\n",
      "11708/11708 [==============================] - 1s 61us/step - loss: 763173346.2016 - mean_squared_error: 763173568.0000\n",
      "Epoch 77/100\n",
      "11708/11708 [==============================] - 1s 58us/step - loss: 763158200.9598 - mean_squared_error: 763158336.0000\n",
      "Epoch 78/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763134687.9263 - mean_squared_error: 763134848.0000\n",
      "Epoch 79/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763116740.4935 - mean_squared_error: 763116672.0000\n",
      "Epoch 80/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 763099297.3097 - mean_squared_error: 763099200.0000\n",
      "Epoch 81/100\n",
      "11708/11708 [==============================] - 1s 58us/step - loss: 763077076.1098 - mean_squared_error: 763077248.0000\n",
      "Epoch 82/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763061988.2691 - mean_squared_error: 763062784.0000\n",
      "Epoch 83/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763041880.9286 - mean_squared_error: 763041984.0000\n",
      "Epoch 84/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 763025141.5129 - mean_squared_error: 763025216.0000\n",
      "Epoch 85/100\n",
      "11708/11708 [==============================] - 1s 62us/step - loss: 763004868.5173 - mean_squared_error: 763004928.0000\n",
      "Epoch 86/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 762990412.2074 - mean_squared_error: 762990400.0000\n",
      "Epoch 87/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 762965354.1609 - mean_squared_error: 762965440.0000\n",
      "Epoch 88/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 762949137.2026 - mean_squared_error: 762949184.0000\n",
      "Epoch 89/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 762928093.7787 - mean_squared_error: 762927872.0000\n",
      "Epoch 90/100\n",
      "11708/11708 [==============================] - 1s 59us/step - loss: 762918929.6707 - mean_squared_error: 762918912.0000\n",
      "Epoch 91/100\n",
      "11708/11708 [==============================] - 1s 66us/step - loss: 762895149.6464 - mean_squared_error: 762894912.0000\n",
      "Epoch 92/100\n",
      "11708/11708 [==============================] - 1s 76us/step - loss: 762875793.5087 - mean_squared_error: 762875584.0000\n",
      "Epoch 93/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 762854633.0848 - mean_squared_error: 762854784.0000\n",
      "Epoch 94/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 762836460.6937 - mean_squared_error: 762836352.0000\n",
      "Epoch 95/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 762816350.6642 - mean_squared_error: 762816384.0000\n",
      "Epoch 96/100\n",
      "11708/11708 [==============================] - 1s 64us/step - loss: 762797729.6638 - mean_squared_error: 762797824.0000\n",
      "Epoch 97/100\n",
      "11708/11708 [==============================] - 1s 63us/step - loss: 762778238.1018 - mean_squared_error: 762778048.0000\n",
      "Epoch 98/100\n",
      "11708/11708 [==============================] - 1s 71us/step - loss: 762761212.1878 - mean_squared_error: 762761024.0000\n",
      "Epoch 99/100\n",
      "11708/11708 [==============================] - 1s 82us/step - loss: 762749550.3623 - mean_squared_error: 762749312.0000\n",
      "Epoch 100/100\n",
      "11708/11708 [==============================] - 1s 73us/step - loss: 762721340.9887 - mean_squared_error: 762721152.0000\n",
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_1 (Dense)              (None, 6)                 48        \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 6)                 42        \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1)                 7         \n",
      "=================================================================\n",
      "Total params: 97\n",
      "Trainable params: 97\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Mean Absolute Error: 3193.3427423485477\n",
      "Mean Squared Error: 828931513.4732981\n",
      "Root Mean Squared Error: 28791.17075551632\n"
     ]
    }
   ],
   "source": [
    "history=ann.fit(X_train,y_train,epochs=100) \n",
    "ann.summary() \n",
    "print_error(X_test,y_test,ann)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['decisiontree_youtubeadview.pkl']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Saving Scikitlearn models\n",
    "import joblib\n",
    "joblib.dump(decision_tree, \"decisiontree_youtubeadview.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Saving Keras Artificial Neural Network model \n",
    "ann.save(\"ann_youtubeadview.h5\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Testing test.csv using trained model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_test = pd.read_csv(\"test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VID_1054</td>\n",
       "      <td>440238</td>\n",
       "      <td>6153</td>\n",
       "      <td>218</td>\n",
       "      <td>1377</td>\n",
       "      <td>2017-02-18</td>\n",
       "      <td>PT7M29S</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VID_18629</td>\n",
       "      <td>1040132</td>\n",
       "      <td>8171</td>\n",
       "      <td>340</td>\n",
       "      <td>1047</td>\n",
       "      <td>2016-06-28</td>\n",
       "      <td>PT6M29S</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VID_13967</td>\n",
       "      <td>28534</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>2014-03-10</td>\n",
       "      <td>PT37M54S</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VID_19442</td>\n",
       "      <td>1316715</td>\n",
       "      <td>2284</td>\n",
       "      <td>250</td>\n",
       "      <td>274</td>\n",
       "      <td>2010-06-05</td>\n",
       "      <td>PT9M55S</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VID_770</td>\n",
       "      <td>1893173</td>\n",
       "      <td>2519</td>\n",
       "      <td>225</td>\n",
       "      <td>116</td>\n",
       "      <td>2016-09-03</td>\n",
       "      <td>PT3M8S</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vidid    views likes dislikes comment   published  duration category\n",
       "0   VID_1054   440238  6153      218    1377  2017-02-18   PT7M29S        B\n",
       "1  VID_18629  1040132  8171      340    1047  2016-06-28   PT6M29S        F\n",
       "2  VID_13967    28534    31       11       1  2014-03-10  PT37M54S        D\n",
       "3  VID_19442  1316715  2284      250     274  2010-06-05   PT9M55S        G\n",
       "4    VID_770  1893173  2519      225     116  2016-09-03    PT3M8S        B"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8764, 8)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.shape \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VID_1054</td>\n",
       "      <td>440238</td>\n",
       "      <td>6153</td>\n",
       "      <td>218</td>\n",
       "      <td>1377</td>\n",
       "      <td>2017-02-18</td>\n",
       "      <td>PT7M29S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VID_18629</td>\n",
       "      <td>1040132</td>\n",
       "      <td>8171</td>\n",
       "      <td>340</td>\n",
       "      <td>1047</td>\n",
       "      <td>2016-06-28</td>\n",
       "      <td>PT6M29S</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VID_13967</td>\n",
       "      <td>28534</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>2014-03-10</td>\n",
       "      <td>PT37M54S</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VID_19442</td>\n",
       "      <td>1316715</td>\n",
       "      <td>2284</td>\n",
       "      <td>250</td>\n",
       "      <td>274</td>\n",
       "      <td>2010-06-05</td>\n",
       "      <td>PT9M55S</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VID_770</td>\n",
       "      <td>1893173</td>\n",
       "      <td>2519</td>\n",
       "      <td>225</td>\n",
       "      <td>116</td>\n",
       "      <td>2016-09-03</td>\n",
       "      <td>PT3M8S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vidid    views likes dislikes comment   published  duration  category\n",
       "0   VID_1054   440238  6153      218    1377  2017-02-18   PT7M29S         2\n",
       "1  VID_18629  1040132  8171      340    1047  2016-06-28   PT6M29S         6\n",
       "2  VID_13967    28534    31       11       1  2014-03-10  PT37M54S         4\n",
       "3  VID_19442  1316715  2284      250     274  2010-06-05   PT9M55S         7\n",
       "4    VID_770  1893173  2519      225     116  2016-09-03    PT3M8S         2"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "category={'A': 1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8} \n",
    "data_test[\"category\"]=data_test[\"category\"].map(category) \n",
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VID_1054</td>\n",
       "      <td>440238</td>\n",
       "      <td>6153</td>\n",
       "      <td>218</td>\n",
       "      <td>1377</td>\n",
       "      <td>2017-02-18</td>\n",
       "      <td>PT7M29S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VID_18629</td>\n",
       "      <td>1040132</td>\n",
       "      <td>8171</td>\n",
       "      <td>340</td>\n",
       "      <td>1047</td>\n",
       "      <td>2016-06-28</td>\n",
       "      <td>PT6M29S</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VID_13967</td>\n",
       "      <td>28534</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>2014-03-10</td>\n",
       "      <td>PT37M54S</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VID_19442</td>\n",
       "      <td>1316715</td>\n",
       "      <td>2284</td>\n",
       "      <td>250</td>\n",
       "      <td>274</td>\n",
       "      <td>2010-06-05</td>\n",
       "      <td>PT9M55S</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VID_770</td>\n",
       "      <td>1893173</td>\n",
       "      <td>2519</td>\n",
       "      <td>225</td>\n",
       "      <td>116</td>\n",
       "      <td>2016-09-03</td>\n",
       "      <td>PT3M8S</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vidid    views likes dislikes comment   published  duration  category\n",
       "0   VID_1054   440238  6153      218    1377  2017-02-18   PT7M29S         2\n",
       "1  VID_18629  1040132  8171      340    1047  2016-06-28   PT6M29S         6\n",
       "2  VID_13967    28534    31       11       1  2014-03-10  PT37M54S         4\n",
       "3  VID_19442  1316715  2284      250     274  2010-06-05   PT9M55S         7\n",
       "4    VID_770  1893173  2519      225     116  2016-09-03    PT3M8S         2"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test=data_test[data_test.views!='F'] \n",
    "data_test=data_test[data_test.likes!='F'] \n",
    "data_test=data_test[data_test.dislikes!='F'] \n",
    "data_test=data_test[data_test.comment!='F']\n",
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_test[\"views\"] = pd.to_numeric(data_test[\"views\"]) \n",
    "data_test[\"comment\"] = pd.to_numeric(data_test[\"comment\"]) \n",
    "data_test[\"likes\"] = pd.to_numeric(data_test[\"likes\"]) \n",
    "data_test[\"dislikes\"] = pd.to_numeric(data_test[\"dislikes\"])\n",
    "column_vidid=data_test['vidid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>231</td>\n",
       "      <td>440238</td>\n",
       "      <td>6153</td>\n",
       "      <td>218</td>\n",
       "      <td>1377</td>\n",
       "      <td>2053</td>\n",
       "      <td>2115</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3444</td>\n",
       "      <td>1040132</td>\n",
       "      <td>8171</td>\n",
       "      <td>340</td>\n",
       "      <td>1047</td>\n",
       "      <td>1825</td>\n",
       "      <td>2055</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1593</td>\n",
       "      <td>28534</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1009</td>\n",
       "      <td>1506</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3775</td>\n",
       "      <td>1316715</td>\n",
       "      <td>2284</td>\n",
       "      <td>250</td>\n",
       "      <td>274</td>\n",
       "      <td>116</td>\n",
       "      <td>2265</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7644</td>\n",
       "      <td>1893173</td>\n",
       "      <td>2519</td>\n",
       "      <td>225</td>\n",
       "      <td>116</td>\n",
       "      <td>1892</td>\n",
       "      <td>1625</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   vidid    views  likes  dislikes  comment  published  duration  category\n",
       "0    231   440238   6153       218     1377       2053      2115         2\n",
       "1   3444  1040132   8171       340     1047       1825      2055         6\n",
       "2   1593    28534     31        11        1       1009      1506         4\n",
       "3   3775  1316715   2284       250      274        116      2265         7\n",
       "4   7644  1893173   2519       225      116       1892      1625         2"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder \n",
    "data_test['duration']=LabelEncoder().fit_transform(data_test['duration']) \n",
    "data_test['vidid']=LabelEncoder().fit_transform(data_test['vidid']) \n",
    "data_test['published']=LabelEncoder().fit_transform(data_test['published'])\n",
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>231</td>\n",
       "      <td>440238</td>\n",
       "      <td>6153</td>\n",
       "      <td>218</td>\n",
       "      <td>1377</td>\n",
       "      <td>2053</td>\n",
       "      <td>449</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3444</td>\n",
       "      <td>1040132</td>\n",
       "      <td>8171</td>\n",
       "      <td>340</td>\n",
       "      <td>1047</td>\n",
       "      <td>1825</td>\n",
       "      <td>389</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1593</td>\n",
       "      <td>28534</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1009</td>\n",
       "      <td>2274</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3775</td>\n",
       "      <td>1316715</td>\n",
       "      <td>2284</td>\n",
       "      <td>250</td>\n",
       "      <td>274</td>\n",
       "      <td>116</td>\n",
       "      <td>595</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7644</td>\n",
       "      <td>1893173</td>\n",
       "      <td>2519</td>\n",
       "      <td>225</td>\n",
       "      <td>116</td>\n",
       "      <td>1892</td>\n",
       "      <td>188</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   vidid    views  likes  dislikes  comment  published  duration  category\n",
       "0    231   440238   6153       218     1377       2053       449         2\n",
       "1   3444  1040132   8171       340     1047       1825       389         6\n",
       "2   1593    28534     31        11        1       1009      2274         4\n",
       "3   3775  1316715   2284       250      274        116       595         7\n",
       "4   7644  1893173   2519       225      116       1892       188         2"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert Time_in_sec for duration\n",
    "import datetime\n",
    "import time\n",
    "def checki(x):\n",
    " y = x[2:]\n",
    " h = ''\n",
    " m = ''\n",
    " s = ''\n",
    " mm = ''\n",
    " P = ['H','M','S']\n",
    " for i in y:\n",
    "     if i not in P:\n",
    "        mm+=i\n",
    "     else:\n",
    "           if(i==\"H\"):\n",
    "              h = mm\n",
    "              mm = ''\n",
    "           elif(i == \"M\"):\n",
    "              m = mm\n",
    "              mm = ''\n",
    "           else:\n",
    "              s = mm\n",
    "              mm = ''\n",
    " if(h==''):\n",
    "       h = '00'\n",
    " if(m == ''):\n",
    "       m = '00'\n",
    " if(s==''):\n",
    "        s='00'\n",
    " bp = h+':'+m+':'+s\n",
    " return bp\n",
    "test=pd.read_csv(\"test.csv\")\n",
    "mp = pd.read_csv(\"test.csv\")[\"duration\"]\n",
    "time = mp.apply(checki)\n",
    "\n",
    "def func_sec(time_string):\n",
    " h, m, s = time_string.split(':')\n",
    " return int(h) * 3600 + int(m) * 60 + int(s)\n",
    "\n",
    "time1=time.apply(func_sec)\n",
    "\n",
    "data_test[\"duration\"]=time1\n",
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vidid</th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8549.000000</td>\n",
       "      <td>8.549000e+03</td>\n",
       "      <td>8549.000000</td>\n",
       "      <td>8549.000000</td>\n",
       "      <td>8549.000000</td>\n",
       "      <td>8549.000000</td>\n",
       "      <td>8549.000000</td>\n",
       "      <td>8549.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4274.000000</td>\n",
       "      <td>7.586353e+05</td>\n",
       "      <td>2923.643701</td>\n",
       "      <td>262.876126</td>\n",
       "      <td>472.864078</td>\n",
       "      <td>1306.212539</td>\n",
       "      <td>1069.782548</td>\n",
       "      <td>4.611767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2468.028059</td>\n",
       "      <td>3.730342e+06</td>\n",
       "      <td>10012.249373</td>\n",
       "      <td>1052.373655</td>\n",
       "      <td>2115.437482</td>\n",
       "      <td>543.152119</td>\n",
       "      <td>2485.572760</td>\n",
       "      <td>1.566363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.700000e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2137.000000</td>\n",
       "      <td>3.138000e+04</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>191.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4274.000000</td>\n",
       "      <td>1.575880e+05</td>\n",
       "      <td>446.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>1435.000000</td>\n",
       "      <td>333.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6411.000000</td>\n",
       "      <td>5.913440e+05</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>229.000000</td>\n",
       "      <td>1800.000000</td>\n",
       "      <td>702.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8548.000000</td>\n",
       "      <td>2.251478e+08</td>\n",
       "      <td>320072.000000</td>\n",
       "      <td>36023.000000</td>\n",
       "      <td>85250.000000</td>\n",
       "      <td>2105.000000</td>\n",
       "      <td>41326.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             vidid         views          likes      dislikes       comment  \\\n",
       "count  8549.000000  8.549000e+03    8549.000000   8549.000000   8549.000000   \n",
       "mean   4274.000000  7.586353e+05    2923.643701    262.876126    472.864078   \n",
       "std    2468.028059  3.730342e+06   10012.249373   1052.373655   2115.437482   \n",
       "min       0.000000  2.700000e+01       0.000000      0.000000      0.000000   \n",
       "25%    2137.000000  3.138000e+04      87.000000      7.000000      8.000000   \n",
       "50%    4274.000000  1.575880e+05     446.000000     38.000000     47.000000   \n",
       "75%    6411.000000  5.913440e+05    1900.000000    166.000000    229.000000   \n",
       "max    8548.000000  2.251478e+08  320072.000000  36023.000000  85250.000000   \n",
       "\n",
       "         published      duration     category  \n",
       "count  8549.000000   8549.000000  8549.000000  \n",
       "mean   1306.212539   1069.782548     4.611767  \n",
       "std     543.152119   2485.572760     1.566363  \n",
       "min       0.000000      5.000000     1.000000  \n",
       "25%     891.000000    191.000000     4.000000  \n",
       "50%    1435.000000    333.000000     4.000000  \n",
       "75%    1800.000000    702.000000     6.000000  \n",
       "max    2105.000000  41326.000000     8.000000  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = joblib.load('decisiontree_youtubeadview.pkl')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 2972.7554644808743\n",
      "Mean Squared Error: 1218947929.4392076\n",
      "Root Mean Squared Error: 34913.4347986446\n"
     ]
    }
   ],
   "source": [
    "prediction = model.predict(X_test)\n",
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, prediction))\n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, prediction))\n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>views</th>\n",
       "      <th>likes</th>\n",
       "      <th>dislikes</th>\n",
       "      <th>comment</th>\n",
       "      <th>published</th>\n",
       "      <th>duration</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>440238</td>\n",
       "      <td>6153</td>\n",
       "      <td>218</td>\n",
       "      <td>1377</td>\n",
       "      <td>2053</td>\n",
       "      <td>449</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1040132</td>\n",
       "      <td>8171</td>\n",
       "      <td>340</td>\n",
       "      <td>1047</td>\n",
       "      <td>1825</td>\n",
       "      <td>389</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28534</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1009</td>\n",
       "      <td>2274</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1316715</td>\n",
       "      <td>2284</td>\n",
       "      <td>250</td>\n",
       "      <td>274</td>\n",
       "      <td>116</td>\n",
       "      <td>595</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1893173</td>\n",
       "      <td>2519</td>\n",
       "      <td>225</td>\n",
       "      <td>116</td>\n",
       "      <td>1892</td>\n",
       "      <td>188</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     views  likes  dislikes  comment  published  duration  category\n",
       "0   440238   6153       218     1377       2053       449         2\n",
       "1  1040132   8171       340     1047       1825       389         6\n",
       "2    28534     31        11        1       1009      2274         4\n",
       "3  1316715   2284       250      274        116       595         7\n",
       "4  1893173   2519       225      116       1892       188         2"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_test = data_test.drop(['vidid'],axis=1)\n",
    "data_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib\n",
    "model = joblib.load(\"decisiontree_youtubeadview.pkl\")\n",
    "prediction = model.predict(data_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([58., 58., 58., ..., 58., 58., 58.])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savetxt('Predictions_Submission1.csv',prediction,delimiter=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
